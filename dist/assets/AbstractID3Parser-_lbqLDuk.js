import{c as s,B as t,K as a,E as e,L as i}from"./index-pBuBQYRc.js";import{I as r}from"./ID3v2Parser-DFchjb5K.js";const o=s("music-metadata:parser:ID3");class AbstractID3Parser extends t{constructor(){super(...arguments),this.id3parser=new r}static async startsWithID3v2Header(s){return"ID3"===(await s.peekToken(a)).fileIdentifier}async parse(){try{await this.parseID3v2()}catch(s){if(!(s instanceof e))throw s;o("End-of-stream")}}finalize(){}async parseID3v2(){if(await this.tryReadId3v2Headers(),o("End of ID3v2 header, go to MPEG-parser: pos=%s",this.tokenizer.position),await this.postId3v2Parse(),this.options.skipPostHeaders&&this.metadata.hasAny())this.finalize();else{const s=new i(this.metadata,this.tokenizer,this.options);await s.parse(),this.finalize()}}async tryReadId3v2Headers(){if("ID3"===(await this.tokenizer.peekToken(a)).fileIdentifier)return o("Found ID3v2 header, pos=%s",this.tokenizer.position),await this.id3parser.parse(this.metadata,this.tokenizer,this.options),this.tryReadId3v2Headers()}}export{AbstractID3Parser as A};
