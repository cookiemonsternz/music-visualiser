import{c as t,F as e,d as a,l as s,g as r,r as i,b as n,m as o}from"./index-pBuBQYRc.js";import{V as m,a as l,b as c}from"./VorbisParser-C95QQAcD.js";import{A as h}from"./AbstractID3Parser-_lbqLDuk.js";import"./ID3v2Parser-DFchjb5K.js";const d=t("music-metadata:parser:FLAC");class FlacContentError extends(o("FLAC")){}var p;!function(t){t[t.STREAMINFO=0]="STREAMINFO",t[t.PADDING=1]="PADDING",t[t.APPLICATION=2]="APPLICATION",t[t.SEEKTABLE=3]="SEEKTABLE",t[t.VORBIS_COMMENT=4]="VORBIS_COMMENT",t[t.CUESHEET=5]="CUESHEET",t[t.PICTURE=6]="PICTURE"}(p||(p={}));class FlacParser extends h{constructor(){super(...arguments),this.vorbisParser=new m(this.metadata,this.options),this.padding=0}async postId3v2Parse(){if("fLaC"!==(await this.tokenizer.readToken(e)).toString())throw new FlacContentError("Invalid FLAC preamble");let t;do{t=await this.tokenizer.readToken(k),await this.parseDataBlock(t)}while(!t.lastBlock);if(this.tokenizer.fileInfo.size&&this.metadata.format.duration){const t=this.tokenizer.fileInfo.size-this.tokenizer.position;this.metadata.setFormat("bitrate",8*t/this.metadata.format.duration)}}async parseDataBlock(t){switch(d(`blockHeader type=${t.type}, length=${t.length}`),t.type){case p.STREAMINFO:return this.parseBlockStreamInfo(t.length);case p.PADDING:this.padding+=t.length;break;case p.APPLICATION:case p.SEEKTABLE:break;case p.VORBIS_COMMENT:return this.parseComment(t.length);case p.CUESHEET:break;case p.PICTURE:return void(await this.parsePicture(t.length));default:this.metadata.addWarning(`Unknown block type: ${t.type}`)}return this.tokenizer.ignore(t.length).then()}async parseBlockStreamInfo(t){if(t!==E.len)throw new FlacContentError("Unexpected block-stream-info length");const e=await this.tokenizer.readToken(E);this.metadata.setFormat("container","FLAC"),this.metadata.setFormat("codec","FLAC"),this.metadata.setFormat("lossless",!0),this.metadata.setFormat("numberOfChannels",e.channels),this.metadata.setFormat("bitsPerSample",e.bitsPerSample),this.metadata.setFormat("sampleRate",e.sampleRate),e.totalSamples>0&&this.metadata.setFormat("duration",e.totalSamples/e.sampleRate)}async parseComment(t){const e=await this.tokenizer.readToken(new a(t)),s=new c(e,0);s.readStringUtf8();const r=s.readInt32(),i=new Array(r);for(let a=0;a<r;a++)i[a]=s.parseUserComment();await Promise.all(i.map((t=>this.vorbisParser.addTag(t.key,t.value))))}async parsePicture(t){if(this.options.skipCovers)return this.tokenizer.ignore(t);const e=await this.tokenizer.readToken(new l(t));this.vorbisParser.addTag("METADATA_BLOCK_PICTURE",e)}}const k={len:4,get:(t,e)=>({lastBlock:s(t,e,7),type:r(t,e,1,7),length:i.get(t,e+1)})},E={len:34,get:(t,e)=>({minimumBlockSize:n.get(t,e),maximumBlockSize:n.get(t,e+2)/1e3,minimumFrameSize:i.get(t,e+4),maximumFrameSize:i.get(t,e+7),sampleRate:i.get(t,e+10)>>4,channels:r(t,e+12,4,3)+1,bitsPerSample:r(t,e+12,7,5)+1,totalSamples:r(t,e+13,4,36),fileMD5:new a(16).get(t,e+18)})};export{FlacParser};
