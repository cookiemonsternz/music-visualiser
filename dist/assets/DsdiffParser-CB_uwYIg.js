import{F as e,n as t,c as a,B as n,d as s,o as i,f as r,b as o,a as h,U as k,S as m,m as c}from"./index-pBuBQYRc.js";import{I as d}from"./ID3v2Parser-DFchjb5K.js";const u={len:12,get:(a,n)=>({chunkID:e.get(a,n),chunkSize:t.get(a,n+4)})},f=a("music-metadata:parser:aiff");class DsdiffContentParseError extends(c("DSDIFF")){}class DsdiffParser extends n{async parse(){const t=await this.tokenizer.readToken(u);if("FRM8"!==t.chunkID)throw new DsdiffContentParseError("Unexpected chunk-ID");const a=(await this.tokenizer.readToken(e)).trim();if("DSD"===a)return this.metadata.setFormat("container",`DSDIFF/${a}`),this.metadata.setFormat("lossless",!0),this.readFmt8Chunks(t.chunkSize-BigInt(e.len));throw new DsdiffContentParseError(`Unsupported DSDIFF type: ${a}`)}async readFmt8Chunks(e){for(;e>=u.len;){const t=await this.tokenizer.readToken(u);f(`Chunk id=${t.chunkID}`),await this.readData(t),e-=BigInt(u.len)+t.chunkSize}}async readData(t){f(`Reading data of chunk[ID=${t.chunkID}, size=${t.chunkSize}]`);const a=this.tokenizer.position;switch(t.chunkID.trim()){case"FVER":{const e=await this.tokenizer.readToken(r);f(`DSDIFF version=${e}`);break}case"PROP":if("SND "!==await this.tokenizer.readToken(e))throw new DsdiffContentParseError("Unexpected PROP-chunk ID");await this.handleSoundPropertyChunks(t.chunkSize-BigInt(e.len));break;case"ID3":{const e=await this.tokenizer.readToken(new s(Number(t.chunkSize))),a=i(e);await(new d).parse(this.metadata,a,this.options);break}case"DSD":this.metadata.format.numberOfChannels&&this.metadata.setFormat("numberOfSamples",Number(t.chunkSize*BigInt(8)/BigInt(this.metadata.format.numberOfChannels))),this.metadata.format.numberOfSamples&&this.metadata.format.sampleRate&&this.metadata.setFormat("duration",this.metadata.format.numberOfSamples/this.metadata.format.sampleRate);break;default:f(`Ignore chunk[ID=${t.chunkID}, size=${t.chunkSize}]`)}const n=t.chunkSize-BigInt(this.tokenizer.position-a);n>0&&(f(`After Parsing chunk, remaining ${n} bytes`),await this.tokenizer.ignore(Number(n)))}async handleSoundPropertyChunks(t){for(f(`Parsing sound-property-chunks, remainingSize=${t}`);t>0;){const a=await this.tokenizer.readToken(u);f(`Sound-property-chunk[ID=${a.chunkID}, size=${a.chunkSize}]`);const n=this.tokenizer.position;switch(a.chunkID.trim()){case"FS":{const e=await this.tokenizer.readToken(k);this.metadata.setFormat("sampleRate",e);break}case"CHNL":{const e=await this.tokenizer.readToken(o);this.metadata.setFormat("numberOfChannels",e),await this.handleChannelChunks(a.chunkSize-BigInt(o.len));break}case"CMPR":{const t=(await this.tokenizer.readToken(e)).trim(),a=await this.tokenizer.readToken(h),n=await this.tokenizer.readToken(new m(a,"ascii"));"DSD"===t&&(this.metadata.setFormat("lossless",!0),this.metadata.setFormat("bitsPerSample",1)),this.metadata.setFormat("codec",`${t} (${n})`);break}case"ABSS":{const e=await this.tokenizer.readToken(o),t=await this.tokenizer.readToken(h),a=await this.tokenizer.readToken(h),n=await this.tokenizer.readToken(k);f(`ABSS ${e}:${t}:${a}.${n}`);break}case"LSCO":{const e=await this.tokenizer.readToken(o);f(`LSCO lsConfig=${e}`);break}default:f(`Unknown sound-property-chunk[ID=${a.chunkID}, size=${a.chunkSize}]`),await this.tokenizer.ignore(Number(a.chunkSize))}const s=a.chunkSize-BigInt(this.tokenizer.position-n);s>0&&(f(`After Parsing sound-property-chunk ${a.chunkSize}, remaining ${s} bytes`),await this.tokenizer.ignore(Number(s))),t-=BigInt(u.len)+a.chunkSize,f(`Parsing sound-property-chunks, remainingSize=${t}`)}if(this.metadata.format.lossless&&this.metadata.format.sampleRate&&this.metadata.format.numberOfChannels&&this.metadata.format.bitsPerSample){const e=this.metadata.format.sampleRate*this.metadata.format.numberOfChannels*this.metadata.format.bitsPerSample;this.metadata.setFormat("bitrate",e)}}async handleChannelChunks(t){f(`Parsing channel-chunks, remainingSize=${t}`);const a=[];for(;t>=e.len;){const n=await this.tokenizer.readToken(e);f(`Channel[ID=${n}]`),a.push(n),t-=BigInt(e.len)}return f(`Channels: ${a.join(", ")}`),a}}export{DsdiffContentParseError,DsdiffParser};
