import{c as e,m as t,U as a,S as s,F as n,a as i,r,b as o,d as c,I as l,y as h,z as m,C as d,w as g,B as p,T as u,u as f,D as k,G as T,H as w}from"./index-pBuBQYRc.js";const y=e("music-metadata:parser:MP4:atom");class Mp4ContentError extends(t("MP4")){}const b={len:8,get:(e,t)=>{const n=a.get(e,t);if(n<0)throw new Mp4ContentError("Invalid atom header length");return{length:BigInt(n),name:new s(4,"latin1").get(e,t+4)}},put:(e,t,s)=>(a.put(e,t,Number(s.length)),n.put(e,t+4,s.name))},A=g,S={len:4,get:(e,t)=>({type:new s(4,"ascii").get(e,t)})};class FixedLengthAtom{constructor(e,t,a){if(this.len=e,e<t)throw new Mp4ContentError(`Atom ${a} expected to be ${t}, but specifies ${e} bytes long.`);e>t&&y(`Warning: atom ${a} expected to be ${t}, but was actually ${e} bytes long.`)}}const SecondsSinceMacEpoch_get=(e,t)=>{const s=a.get(e,t)-2082844800;return new Date(1e3*s)};class MdhdAtom extends FixedLengthAtom{constructor(e){super(e,24,"mdhd"),this.len=e}get(e,t){return{version:i.get(e,t+0),flags:r.get(e,t+1),creationTime:SecondsSinceMacEpoch_get(e,t+4),modificationTime:SecondsSinceMacEpoch_get(e,t+8),timeScale:a.get(e,t+12),duration:a.get(e,t+16),language:o.get(e,t+20),quality:o.get(e,t+22)}}}class MvhdAtom extends FixedLengthAtom{constructor(e){super(e,100,"mvhd"),this.len=e}get(e,t){return{version:i.get(e,t),flags:r.get(e,t+1),creationTime:SecondsSinceMacEpoch_get(e,t+4),modificationTime:SecondsSinceMacEpoch_get(e,t+8),timeScale:a.get(e,t+12),duration:a.get(e,t+16),preferredRate:a.get(e,t+20),preferredVolume:o.get(e,t+24),previewTime:a.get(e,t+72),previewDuration:a.get(e,t+76),posterTime:a.get(e,t+80),selectionTime:a.get(e,t+84),selectionDuration:a.get(e,t+88),currentTime:a.get(e,t+92),nextTrackID:a.get(e,t+96)}}}class DataAtom{constructor(e){this.len=e}get(e,t){return{type:{set:i.get(e,t+0),type:r.get(e,t+1)},locale:r.get(e,t+4),value:new c(this.len-8).get(e,t+8)}}}class NameAtom{constructor(e){this.len=e}get(e,t){return{version:i.get(e,t),flags:r.get(e,t+1),name:new s(this.len-4,"utf-8").get(e,t+4)}}}class TrackHeaderAtom{constructor(e){this.len=e}get(e,t){return{version:i.get(e,t),flags:r.get(e,t+1),creationTime:SecondsSinceMacEpoch_get(e,t+4),modificationTime:SecondsSinceMacEpoch_get(e,t+8),trackId:a.get(e,t+12),duration:a.get(e,t+20),layer:o.get(e,t+24),alternateGroup:o.get(e,t+26),volume:o.get(e,t+28)}}}const z=8,stsdHeader_get=(e,t)=>({version:i.get(e,t),flags:r.get(e,t+1),numberOfEntries:a.get(e,t+4)});class SampleDescriptionTable{constructor(e){this.len=e}get(e,t){return{dataFormat:n.get(e,t),dataReferenceIndex:o.get(e,t+10),description:new c(this.len-12).get(e,t+12)}}}class StsdAtom{constructor(e){this.len=e}get(e,t){const s=stsdHeader_get(e,t);t+=z;const n=[];for(let i=0;i<s.numberOfEntries;++i){const s=a.get(e,t);t+=a.len,n.push(new SampleDescriptionTable(s).get(e,t)),t+=s}return{header:s,table:n}}}const C={len:8,get:(e,t)=>({version:l.get(e,t),revision:l.get(e,t+2),vendor:h.get(e,t+4)})},$={len:12,get:(e,t)=>({numAudioChannels:l.get(e,t+0),sampleSize:l.get(e,t+2),compressionId:l.get(e,t+4),packetSize:l.get(e,t+6),sampleRate:o.get(e,t+8)+o.get(e,t+10)/1e4})};class SimpleTableAtom{constructor(e,t){this.len=e,this.token=t}get(e,t){const a=h.get(e,t+4);return{version:m.get(e,t+0),flags:d.get(e,t+1),numberOfEntries:a,entries:readTokenTable(e,this.token,t+8,this.len-8,a)}}}const v={len:8,get:(e,t)=>({count:h.get(e,t+0),duration:h.get(e,t+4)})};class SttsAtom extends SimpleTableAtom{constructor(e){super(e,v),this.len=e}}const P={len:12,get:(e,t)=>({firstChunk:h.get(e,t),samplesPerChunk:h.get(e,t+4),sampleDescriptionId:h.get(e,t+8)})};class StscAtom extends SimpleTableAtom{constructor(e){super(e,P),this.len=e}}class StszAtom{constructor(e){this.len=e}get(e,t){const a=h.get(e,t+8);return{version:m.get(e,t),flags:d.get(e,t+1),sampleSize:h.get(e,t+4),numberOfEntries:a,entries:readTokenTable(e,h,t+12,this.len-12,a)}}}class StcoAtom extends SimpleTableAtom{constructor(e){super(e,h),this.len=e}}class ChapterText{constructor(e){this.len=e}get(e,t){const a=l.get(e,t+0);return new s(a,"utf-8").get(e,t+2)}}function readTokenTable(e,t,a,s,n){if(y(`remainingLen=${s}, numberOfEntries=${n} * token-len=${t.len}`),0===s)return[];if(s!==n*t.len)throw new Mp4ContentError("mismatch number-of-entries with remaining atom-length");const i=[];for(let r=0;r<n;++r)i.push(t.get(e,a)),a+=t.len;return i}const D=e("music-metadata:parser:MP4:Atom");class Atom{static async readAtom(e,t,a,s){const n=e.position;D(`Reading next token on offset=${n}...`);const i=await e.readToken(b),r=1n===i.length;r&&(i.length=await e.readToken(A));const o=new Atom(i,r,a),c=o.getPayloadLength(s);return D(`parse atom name=${o.atomPath}, extended=${o.extended}, offset=${n}, len=${o.header.length}`),await o.readData(e,t,c),o}constructor(e,t,a){this.header=e,this.extended=t,this.parent=a,this.children=[],this.atomPath=(this.parent?`${this.parent.atomPath}.`:"")+this.header.name}getHeaderLength(){return this.extended?16:8}getPayloadLength(e){return(0n===this.header.length?e:Number(this.header.length))-this.getHeaderLength()}async readAtoms(e,t,a){for(;a>0;){const s=await Atom.readAtom(e,t,this,a);this.children.push(s),a-=0n===s.header.length?a:Number(s.header.length)}}async readData(e,t,a){switch(this.header.name){case"moov":case"udta":case"trak":case"mdia":case"minf":case"stbl":case"<id>":case"ilst":case"tref":return this.readAtoms(e,t,this.getPayloadLength(a));case"meta":{const s="hdlr"===(await e.peekToken(b)).name?0:4;return await e.ignore(s),this.readAtoms(e,t,this.getPayloadLength(a)-s)}default:return t(this,a)}}}const x=e("music-metadata:parser:MP4"),M={raw:{lossy:!1,format:"raw"},MAC3:{lossy:!0,format:"MACE 3:1"},MAC6:{lossy:!0,format:"MACE 6:1"},ima4:{lossy:!0,format:"IMA 4:1"},ulaw:{lossy:!0,format:"uLaw 2:1"},alaw:{lossy:!0,format:"uLaw 2:1"},Qclp:{lossy:!0,format:"QUALCOMM PureVoice"},".mp3":{lossy:!0,format:"MPEG-1 layer 3"},alac:{lossy:!1,format:"ALAC"},"ac-3":{lossy:!0,format:"AC-3"},mp4a:{lossy:!0,format:"MPEG-4/AAC"},mp4s:{lossy:!0,format:"MP4S"},c608:{lossy:!0,format:"CEA-608"},c708:{lossy:!0,format:"CEA-708"}};function distinct(e,t,a){return a.indexOf(e)===t}class MP4Parser extends p{constructor(){super(...arguments),this.tracks=[],this.atomParsers={mvhd:async e=>{const t=await this.tokenizer.readToken(new MvhdAtom(e));this.metadata.setFormat("creationTime",t.creationTime),this.metadata.setFormat("modificationTime",t.modificationTime)},mdhd:async e=>{const t=await this.tokenizer.readToken(new MdhdAtom(e)),a=this.getTrackDescription();a.creationTime=t.creationTime,a.modificationTime=t.modificationTime,a.timeScale=t.timeScale,a.duration=t.duration},chap:async e=>{const t=this.getTrackDescription(),s=[];for(;e>=a.len;)s.push(await this.tokenizer.readNumber(a)),e-=a.len;t.chapterList=s},tkhd:async e=>{const t=await this.tokenizer.readToken(new TrackHeaderAtom(e));this.tracks.push(t)},mdat:async e=>{if(this.audioLengthInBytes=e,this.calculateBitRate(),this.options.includeChapters){const t=this.tracks.filter((e=>e.chapterList));if(1===t.length){const a=t[0].chapterList,s=this.tracks.filter((e=>-1!==a.indexOf(e.trackId)));if(1===s.length)return this.parseChapterTrack(s[0],t[0],e)}}await this.tokenizer.ignore(e)},ftyp:async e=>{const t=[];for(;e>0;){const a=await this.tokenizer.readToken(S);e-=S.len;const s=a.type.replace(/\W/g,"");s.length>0&&t.push(s)}x(`ftyp: ${t.join("/")}`);const a=t.filter(distinct).join("/");this.metadata.setFormat("container",a)},stsd:async e=>{const t=await this.tokenizer.readToken(new StsdAtom(e));this.getTrackDescription().soundSampleDescription=t.table.map((e=>this.parseSoundSampleDescription(e)))},stsc:async e=>{const t=await this.tokenizer.readToken(new StscAtom(e));this.getTrackDescription().sampleToChunkTable=t.entries},stts:async e=>{const t=await this.tokenizer.readToken(new SttsAtom(e));this.getTrackDescription().timeToSampleTable=t.entries},stsz:async e=>{const t=await this.tokenizer.readToken(new StszAtom(e)),a=this.getTrackDescription();a.sampleSize=t.sampleSize,a.sampleSizeTable=t.entries},stco:async e=>{const t=await this.tokenizer.readToken(new StcoAtom(e));this.getTrackDescription().chunkOffsetTable=t.entries},date:async e=>{const t=await this.tokenizer.readToken(new s(e,"utf-8"));await this.addTag("date",t)}}}static read_BE_Integer(e,t){const a=(t?"INT":"UINT")+8*e.length+(e.length>1?"_BE":""),s=T[a];if(!s)throw new Mp4ContentError(`Token for integer type not found: "${a}"`);return Number(s.get(e,0))}async parse(){this.tracks=[];let e=this.tokenizer.fileInfo.size||0;for(;!this.tokenizer.fileInfo.size||e>0;){try{if("\0\0\0\0"===(await this.tokenizer.peekToken(b)).name){const e=`Error at offset=${this.tokenizer.position}: box.id=0`;x(e),this.addWarning(e);break}}catch(s){if(!(s instanceof Error))throw s;{const e=`Error at offset=${this.tokenizer.position}: ${s.message}`;x(e),this.addWarning(e)}break}const t=await Atom.readAtom(this.tokenizer,((e,t)=>this.handleAtom(e,t)),null,e);e-=t.header.length===BigInt(0)?e:Number(t.header.length)}const t=[];this.tracks.forEach((e=>{const a=[];e.soundSampleDescription.forEach((e=>{const t={},s=M[e.dataFormat];if(s?(a.push(s.format),t.codecName=s.format):t.codecName=`<${e.dataFormat}>`,e.description){const{description:a}=e;a.sampleRate>0&&(t.type=u.audio,t.audio={samplingFrequency:a.sampleRate,bitDepth:a.sampleSize,channels:a.numAudioChannels})}this.metadata.addStreamInfo(t)})),a.length>=1&&t.push(a.join("/"))})),t.length>0&&this.metadata.setFormat("codec",t.filter(distinct).join("+"));const a=this.tracks.filter((e=>e.soundSampleDescription.length>=1&&e.soundSampleDescription[0].description&&e.soundSampleDescription[0].description.numAudioChannels>0));if(a.length>=1){const e=a[0];if(e.timeScale>0){const t=e.duration/e.timeScale;this.metadata.setFormat("duration",t)}const t=e.soundSampleDescription[0];if(t.description&&(this.metadata.setFormat("sampleRate",t.description.sampleRate),this.metadata.setFormat("bitsPerSample",t.description.sampleSize),this.metadata.setFormat("numberOfChannels",t.description.numAudioChannels),0===e.timeScale&&e.timeToSampleTable.length>0)){const a=e.timeToSampleTable.map((e=>e.count*e.duration)).reduce(((e,t)=>e+t))/t.description.sampleRate;this.metadata.setFormat("duration",a)}const s=M[t.dataFormat];s&&this.metadata.setFormat("lossless",!s.lossy),this.calculateBitRate()}}async handleAtom(e,t){if(e.parent)switch(e.parent.header.name){case"ilst":case"<id>":return this.parseMetadataItemData(e)}if(this.atomParsers[e.header.name])return this.atomParsers[e.header.name](t);x(`No parser for atom path=${e.atomPath}, payload-len=${t}, ignoring atom`),await this.tokenizer.ignore(t)}getTrackDescription(){return this.tracks[this.tracks.length-1]}calculateBitRate(){this.audioLengthInBytes&&this.metadata.format.duration&&this.metadata.setFormat("bitrate",8*this.audioLengthInBytes/this.metadata.format.duration)}async addTag(e,t){await this.metadata.addTag("iTunes",e,t)}addWarning(e){x(`Warning: ${e}`),this.metadata.addWarning(e)}parseMetadataItemData(e){let t=e.header.name;return e.readAtoms(this.tokenizer,(async(e,a)=>{const s=e.getPayloadLength(a);switch(e.header.name){case"data":return this.parseValueAtom(t,e);case"name":case"mean":case"rate":{const e=await this.tokenizer.readToken(new NameAtom(s));t+=`:${e.name}`;break}default:{const a=await this.tokenizer.readToken(new c(s));this.addWarning(`Unsupported meta-item: ${t}[${e.header.name}] => value=${f(a)} ascii=${k(a,"ascii")}`)}}}),e.getPayloadLength(0))}async parseValueAtom(e,t){const s=await this.tokenizer.readToken(new DataAtom(Number(t.header.length)-b.len));if(0!==s.type.set)throw new Mp4ContentError(`Unsupported type-set != 0: ${s.type.set}`);switch(s.type.type){case 0:switch(e){case"trkn":case"disk":{const t=i.get(s.value,3),a=i.get(s.value,5);await this.addTag(e,`${t}/${a}`);break}case"gnre":{const t=i.get(s.value,1),a=w[t-1];await this.addTag(e,a);break}case"rate":{const t=new TextDecoder("ascii").decode(s.value);await this.addTag(e,t);break}default:x(`unknown proprietary value type for: ${t.atomPath}`)}break;case 1:case 18:await this.addTag(e,new TextDecoder("utf-8").decode(s.value));break;case 13:if(this.options.skipCovers)break;await this.addTag(e,{format:"image/jpeg",data:Uint8Array.from(s.value)});break;case 14:if(this.options.skipCovers)break;await this.addTag(e,{format:"image/png",data:Uint8Array.from(s.value)});break;case 21:await this.addTag(e,MP4Parser.read_BE_Integer(s.value,!0));break;case 22:await this.addTag(e,MP4Parser.read_BE_Integer(s.value,!1));break;case 65:await this.addTag(e,i.get(s.value,0));break;case 66:await this.addTag(e,o.get(s.value,0));break;case 67:await this.addTag(e,a.get(s.value,0));break;default:this.addWarning(`atom key=${e}, has unknown well-known-type (data-type): ${s.type.type}`)}}parseSoundSampleDescription(e){const t={dataFormat:e.dataFormat,dataReferenceIndex:e.dataReferenceIndex};let a=0;const s=C.get(e.description,a);return a+=C.len,0===s.version||1===s.version?t.description=$.get(e.description,a):x(`Warning: sound-sample-description ${s} not implemented`),t}async parseChapterTrack(e,t,a){if(!e.sampleSize&&e.chunkOffsetTable.length!==e.sampleSizeTable.length)throw new Error("Expected equal chunk-offset-table & sample-size-table length.");const s=[];for(let n=0;n<e.chunkOffsetTable.length&&a>0;++n){const i=e.chunkOffsetTable[n]-this.tokenizer.position,r=e.sampleSize>0?e.sampleSize:e.sampleSizeTable[n];if((a-=i+r)<0)throw new Mp4ContentError("Chapter chunk exceeding token length");await this.tokenizer.ignore(i);const o=await this.tokenizer.readToken(new ChapterText(r));x(`Chapter ${n+1}: ${o}`);const c={title:o,sampleOffset:this.findSampleOffset(t,this.tokenizer.position)};x(`Chapter title=${c.title}, offset=${c.sampleOffset}/${this.tracks[0].duration}`),s.push(c)}this.metadata.setFormat("chapters",s),await this.tokenizer.ignore(a)}findSampleOffset(e,t){let a=0;e.timeToSampleTable.forEach((e=>{a+=e.count*e.duration})),x(`Total duration=${a}`);let s=0;for(;s<e.chunkOffsetTable.length&&e.chunkOffsetTable[s]<t;)++s;return this.getChunkDuration(s+1,e)}getChunkDuration(e,t){let a=0,s=t.timeToSampleTable[a].count,n=t.timeToSampleTable[a].duration,i=1,r=this.getSamplesPerChunk(i,t.sampleToChunkTable),o=0;for(;i<e;){const e=Math.min(s,r);o+=e*n,s-=e,r-=e,0===r?(++i,r=this.getSamplesPerChunk(i,t.sampleToChunkTable)):(++a,s=t.timeToSampleTable[a].count,n=t.timeToSampleTable[a].duration)}return o}getSamplesPerChunk(e,t){for(let a=0;a<t.length-1;++a)if(e>=t[a].firstChunk&&e<t[a+1].firstChunk)return t[a].samplesPerChunk;return t[t.length-1].samplesPerChunk}}export{MP4Parser};
