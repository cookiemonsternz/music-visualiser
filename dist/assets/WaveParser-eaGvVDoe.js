import{S as e,f as t,m as a,k as n,s as i,d as s,c as r,B as o,E as h,F as c,o as k}from"./index-pBuBQYRc.js";import{I as d}from"./ID3v2Parser-DFchjb5K.js";const m={len:8,get:(a,n)=>({chunkID:new e(4,"latin1").get(a,n),chunkSize:t.get(a,n+4)})};class ListInfoTagValue{constructor(e){this.tagHeader=e,this.len=e.chunkSize,this.len+=1&this.len}get(t,a){return new e(this.tagHeader.chunkSize,"ascii").get(t,a)}}class WaveContentError extends(a("Wave")){}var g;!function(e){e[e.PCM=1]="PCM",e[e.ADPCM=2]="ADPCM",e[e.IEEE_FLOAT=3]="IEEE_FLOAT",e[e.MPEG_ADTS_AAC=5632]="MPEG_ADTS_AAC",e[e.MPEG_LOAS=5634]="MPEG_LOAS",e[e.RAW_AAC1=255]="RAW_AAC1",e[e.DOLBY_AC3_SPDIF=146]="DOLBY_AC3_SPDIF",e[e.DVM=8192]="DVM",e[e.RAW_SPORT=576]="RAW_SPORT",e[e.ESST_AC3=577]="ESST_AC3",e[e.DRM=9]="DRM",e[e.DTS2=8193]="DTS2",e[e.MPEG=80]="MPEG"}(g||(g={}));class Format{constructor(e){if(e.chunkSize<16)throw new WaveContentError("Invalid chunk size");this.len=e.chunkSize}get(e,a){return{wFormatTag:n.get(e,a),nChannels:n.get(e,a+2),nSamplesPerSec:t.get(e,a+4),nAvgBytesPerSec:t.get(e,a+8),nBlockAlign:n.get(e,a+12),wBitsPerSample:n.get(e,a+14)}}}class FactChunk{constructor(e){if(e.chunkSize<4)throw new WaveContentError("Invalid fact chunk size.");this.len=e.chunkSize}get(e,a){return{dwSampleLength:t.get(e,a)}}}const u={len:420,get:(a,r)=>({description:i(new e(256,"ascii").get(a,r)).trim(),originator:i(new e(32,"ascii").get(a,r+256)).trim(),originatorReference:i(new e(32,"ascii").get(a,r+288)).trim(),originationDate:i(new e(10,"ascii").get(a,r+320)).trim(),originationTime:i(new e(8,"ascii").get(a,r+330)).trim(),timeReferenceLow:t.get(a,r+338),timeReferenceHigh:t.get(a,r+342),version:n.get(a,r+346),umid:new s(64).get(a,r+348),loudnessValue:n.get(a,r+412),maxTruePeakLevel:n.get(a,r+414),maxMomentaryLoudness:n.get(a,r+416),maxShortTermLoudness:n.get(a,r+418)})},l=r("music-metadata:parser:RIFF");class WaveParser extends o{constructor(){super(...arguments),this.blockAlign=0}async parse(){const e=await this.tokenizer.readToken(m);if(l(`pos=${this.tokenizer.position}, parse: chunkID=${e.chunkID}`),"RIFF"===e.chunkID)return this.parseRiffChunk(e.chunkSize).catch((e=>{if(!(e instanceof h))throw e}))}async parseRiffChunk(e){const t=await this.tokenizer.readToken(c);if(this.metadata.setFormat("container",t),"WAVE"===t)return this.readWaveChunk(e-c.len);throw new WaveContentError(`Unsupported RIFF format: RIFF/${t}`)}async readWaveChunk(e){for(;e>=m.len;){const t=await this.tokenizer.readToken(m);switch(e-=m.len+t.chunkSize,t.chunkSize>e&&this.metadata.addWarning("Data chunk size exceeds file size"),this.header=t,l(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${t.chunkID}`),t.chunkID){case"LIST":await this.parseListTag(t);break;case"fact":this.metadata.setFormat("lossless",!1),this.fact=await this.tokenizer.readToken(new FactChunk(t));break;case"fmt ":{const e=await this.tokenizer.readToken(new Format(t));let a=g[e.wFormatTag];a||(l(`WAVE/non-PCM format=${e.wFormatTag}`),a=`non-PCM (${e.wFormatTag})`),this.metadata.setFormat("codec",a),this.metadata.setFormat("bitsPerSample",e.wBitsPerSample),this.metadata.setFormat("sampleRate",e.nSamplesPerSec),this.metadata.setFormat("numberOfChannels",e.nChannels),this.metadata.setFormat("bitrate",e.nBlockAlign*e.nSamplesPerSec*8),this.blockAlign=e.nBlockAlign;break}case"id3 ":case"ID3 ":{const e=await this.tokenizer.readToken(new s(t.chunkSize)),a=k(e);await(new d).parse(this.metadata,a,this.options);break}case"data":{!1!==this.metadata.format.lossless&&this.metadata.setFormat("lossless",!0);let e=t.chunkSize;if(this.tokenizer.fileInfo.size){const t=this.tokenizer.fileInfo.size-this.tokenizer.position;t<e&&(this.metadata.addWarning("data chunk length exceeding file length"),e=t)}const a=this.fact?this.fact.dwSampleLength:4294967295===e?void 0:e/this.blockAlign;a&&(this.metadata.setFormat("numberOfSamples",a),this.metadata.format.sampleRate&&this.metadata.setFormat("duration",a/this.metadata.format.sampleRate)),"ADPCM"===this.metadata.format.codec?this.metadata.setFormat("bitrate",352e3):this.metadata.format.sampleRate&&this.metadata.setFormat("bitrate",this.blockAlign*this.metadata.format.sampleRate*8),await this.tokenizer.ignore(t.chunkSize);break}case"bext":{const e=await this.tokenizer.readToken(u);Object.keys(e).forEach((t=>{this.metadata.addTag("exif",`bext.${t}`,e[t])}));const a=t.chunkSize-u.len;await this.tokenizer.ignore(a);break}case"\0\0\0\0":l(`Ignore padding chunk: RIFF/${t.chunkID} of ${t.chunkSize} bytes`),this.metadata.addWarning(`Ignore chunk: RIFF/${t.chunkID}`),await this.tokenizer.ignore(t.chunkSize);break;default:l(`Ignore chunk: RIFF/${t.chunkID} of ${t.chunkSize} bytes`),this.metadata.addWarning(`Ignore chunk: RIFF/${t.chunkID}`),await this.tokenizer.ignore(t.chunkSize)}this.header.chunkSize%2==1&&(l("Read odd padding byte"),await this.tokenizer.ignore(1))}}async parseListTag(t){const a=await this.tokenizer.readToken(new e(4,"latin1"));return l("pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s",this.tokenizer.position,a),"INFO"===a?this.parseRiffInfoTags(t.chunkSize-4):(this.metadata.addWarning(`Ignore chunk: RIFF/WAVE/LIST/${a}`),l(`Ignoring chunkID=RIFF/WAVE/LIST/${a}`),this.tokenizer.ignore(t.chunkSize-4).then())}async parseRiffInfoTags(e){for(;e>=8;){const t=await this.tokenizer.readToken(m),a=new ListInfoTagValue(t),n=await this.tokenizer.readToken(a);this.addTag(t.chunkID,i(n)),e-=8+a.len}if(0!==e)throw new WaveContentError(`Illegal remaining size: ${e}`)}addTag(e,t){this.metadata.addTag("exif",e,t)}}export{WaveParser};
