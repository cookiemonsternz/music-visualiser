import{m as e,S as t,a,k as s,f as r,M as i,q as n,c as o,b as g,r as h,B as d,d as m,E as p,F as c,l as u,j as l}from"./index-pBuBQYRc.js";import{V as b}from"./VorbisParser-C95QQAcD.js";class OpusContentError extends(e("Opus")){}class IdHeader{constructor(e){if(this.len=e,e<19)throw new OpusContentError("ID-header-page 0 should be at least 19 bytes long")}get(e,i){return{magicSignature:new t(8,"ascii").get(e,i+0),version:a.get(e,i+8),channelCount:a.get(e,i+9),preSkip:s.get(e,i+10),inputSampleRate:r.get(e,i+12),outputGain:s.get(e,i+16),channelMapping:a.get(e,i+18)}}}class OpusParser extends b{constructor(e,t,a){super(e,t),this.tokenizer=a,this.idHeader=null,this.lastPos=-1}parseFirstPage(e,t){if(this.metadata.setFormat("codec","Opus"),this.idHeader=new IdHeader(t.length).get(t,0),"OpusHead"!==this.idHeader.magicSignature)throw new OpusContentError("Illegal ogg/Opus magic-signature");this.metadata.setFormat("sampleRate",this.idHeader.inputSampleRate),this.metadata.setFormat("numberOfChannels",this.idHeader.channelCount)}async parseFullPage(e){if("OpusTags"===new t(8,"ascii").get(e,0))await this.parseUserCommentList(e,8),this.lastPos=this.tokenizer.position-e.length}calculateDuration(e){if(this.metadata.format.sampleRate&&e.absoluteGranulePosition>=0){const t=e.absoluteGranulePosition-this.idHeader.preSkip;if(this.metadata.setFormat("numberOfSamples",t),this.metadata.setFormat("duration",t/48e3),-1!==this.lastPos&&this.tokenizer.fileInfo.size&&this.metadata.format.duration){const e=this.tokenizer.fileInfo.size-this.lastPos;this.metadata.setFormat("bitrate",8*e/this.metadata.format.duration)}}}}const Header_get=(e,a)=>({speex:new t(8,"ascii").get(e,a+0),version:i(new t(20,"ascii").get(e,a+8)),version_id:n.get(e,a+28),header_size:n.get(e,a+32),rate:n.get(e,a+36),mode:n.get(e,a+40),mode_bitstream_version:n.get(e,a+44),nb_channels:n.get(e,a+48),bitrate:n.get(e,a+52),frame_size:n.get(e,a+56),vbr:n.get(e,a+60),frames_per_packet:n.get(e,a+64),extra_headers:n.get(e,a+68),reserved1:n.get(e,a+72),reserved2:n.get(e,a+76)}),f=o("music-metadata:parser:ogg:speex");class SpeexParser extends b{constructor(e,t,a){super(e,t),this.tokenizer=a}parseFirstPage(e,t){f("First Ogg/Speex page");const a=Header_get(t,0);this.metadata.setFormat("codec",`Speex ${a.version}`),this.metadata.setFormat("numberOfChannels",a.nb_channels),this.metadata.setFormat("sampleRate",a.rate),-1!==a.bitrate&&this.metadata.setFormat("bitrate",a.bitrate)}}const IdentificationHeader_get=(e,s)=>({id:new t(7,"ascii").get(e,s),vmaj:a.get(e,s+7),vmin:a.get(e,s+8),vrev:a.get(e,s+9),vmbw:g.get(e,s+10),vmbh:g.get(e,s+17),nombr:h.get(e,s+37),nqual:a.get(e,s+40)}),P=o("music-metadata:parser:ogg:theora");class TheoraParser{constructor(e,t,a){this.metadata=e,this.tokenizer=a}async parsePage(e,t){e.headerType.firstPage&&await this.parseFirstPage(e,t)}async flush(){P("flush")}calculateDuration(e){P("duration calculation not implemented")}async parseFirstPage(e,t){P("First Ogg/Theora page"),this.metadata.setFormat("codec","Theora");const a=IdentificationHeader_get(t,0);this.metadata.setFormat("bitrate",a.nombr)}}class OggContentError extends(e("Ogg")){}const w=o("music-metadata:parser:ogg");class SegmentTable{static sum(e,t,a){const s=new DataView(e.buffer,0);let r=0;for(let i=t;i<t+a;++i)r+=s.getUint8(i);return r}constructor(e){this.len=e.page_segments}get(e,t){return{totalPageSize:SegmentTable.sum(e,t,this.len)}}}class OggParser extends d{constructor(){super(...arguments),this.header=null,this.pageNumber=0,this.pageConsumer=null}async parse(){w("pos=%s, parsePage()",this.tokenizer.position);try{let e;do{if(e=await this.tokenizer.readToken(OggParser.Header),"OggS"!==e.capturePattern)throw new OggContentError("Invalid Ogg capture pattern");this.metadata.setFormat("container","Ogg"),this.header=e,this.pageNumber=e.pageSequenceNo,w("page#=%s, Ogg.id=%s",e.pageSequenceNo,e.capturePattern);const t=await this.tokenizer.readToken(new SegmentTable(e));w("totalPageSize=%s",t.totalPageSize);const a=await this.tokenizer.readToken(new m(t.totalPageSize));if(w("firstPage=%s, lastPage=%s, continued=%s",e.headerType.firstPage,e.headerType.lastPage,e.headerType.continued),e.headerType.firstPage){const e=new TextDecoder("ascii").decode(a.subarray(0,7));switch(e){case"vorbis":w("Set page consumer to Ogg/Vorbis"),this.pageConsumer=new b(this.metadata,this.options);break;case"OpusHea":w("Set page consumer to Ogg/Opus"),this.pageConsumer=new OpusParser(this.metadata,this.options,this.tokenizer);break;case"Speex  ":w("Set page consumer to Ogg/Speex"),this.pageConsumer=new SpeexParser(this.metadata,this.options,this.tokenizer);break;case"fishead":case"\0theora":w("Set page consumer to Ogg/Theora"),this.pageConsumer=new TheoraParser(this.metadata,this.options,this.tokenizer);break;default:throw new OggContentError(`gg audio-codec not recognized (id=${e})`)}}await this.pageConsumer.parsePage(e,a)}while(!e.headerType.lastPage)}catch(e){if(!(e instanceof Error))throw e;e instanceof p?(this.metadata.addWarning("Last OGG-page is not marked with last-page flag"),w("End-of-stream"),this.metadata.addWarning("Last OGG-page is not marked with last-page flag"),this.header&&this.pageConsumer.calculateDuration(this.header)):e.message.startsWith("FourCC")&&this.pageNumber>0&&(this.metadata.addWarning("Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag"),await this.pageConsumer.flush())}}}OggParser.Header={len:27,get:(e,t)=>({capturePattern:c.get(e,t),version:a.get(e,t+4),headerType:{continued:u(e,t+5,0),firstPage:u(e,t+5,1),lastPage:u(e,t+5,2)},absoluteGranulePosition:Number(l.get(e,t+6)),streamSerialNumber:r.get(e,t+14),pageSequenceNo:r.get(e,t+18),pageChecksum:r.get(e,t+22),page_segments:a.get(e,t+26)})};export{OggContentError,OggParser,SegmentTable};
