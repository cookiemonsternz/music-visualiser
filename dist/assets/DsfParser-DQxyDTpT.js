import{F as e,j as t,p as a,q as s,c as n,m as r}from"./index-pBuBQYRc.js";import{A as i}from"./AbstractID3Parser-_lbqLDuk.js";import{I as o}from"./ID3v2Parser-DFchjb5K.js";const m={len:12,get:(a,s)=>({id:e.get(a,s),size:t.get(a,s+4)})},l={len:16,get:(e,t)=>({fileSize:a.get(e,t),metadataPointer:a.get(e,t+8)})};var h;!function(e){e[e.mono=1]="mono",e[e.stereo=2]="stereo",e[e.channels=3]="channels",e[e.quad=4]="quad",e[e["4 channels"]=5]="4 channels",e[e["5 channels"]=6]="5 channels",e[e["5.1 channels"]=7]="5.1 channels"}(h||(h={}));const c={len:40,get:(e,t)=>({formatVersion:s.get(e,t),formatID:s.get(e,t+4),channelType:s.get(e,t+8),channelNum:s.get(e,t+12),samplingFrequency:s.get(e,t+16),bitsPerSample:s.get(e,t+20),sampleCount:a.get(e,t+24),blockSizePerChannel:s.get(e,t+32)})},d=n("music-metadata:parser:DSF");class DsdContentParseError extends(r("DSD")){}class DsfParser extends i{async postId3v2Parse(){const e=this.tokenizer.position,t=await this.tokenizer.readToken(m);if("DSD "!==t.id)throw new DsdContentParseError("Invalid chunk signature");this.metadata.setFormat("container","DSF"),this.metadata.setFormat("lossless",!0);const a=await this.tokenizer.readToken(l);if(a.metadataPointer!==BigInt(0))return d(`expect ID3v2 at offset=${a.metadataPointer}`),await this.parseChunks(a.fileSize-t.size),await this.tokenizer.ignore(Number(a.metadataPointer)-this.tokenizer.position-e),(new o).parse(this.metadata,this.tokenizer,this.options);d("No ID3v2 tag present")}async parseChunks(e){for(;e>=m.len;){const t=await this.tokenizer.readToken(m);if(d(`Parsing chunk name=${t.id} size=${t.size}`),"fmt "===t.id){const e=await this.tokenizer.readToken(c);this.metadata.setFormat("numberOfChannels",e.channelNum),this.metadata.setFormat("sampleRate",e.samplingFrequency),this.metadata.setFormat("bitsPerSample",e.bitsPerSample),this.metadata.setFormat("numberOfSamples",e.sampleCount),this.metadata.setFormat("duration",Number(e.sampleCount)/e.samplingFrequency);const t=e.bitsPerSample*e.samplingFrequency*e.channelNum;return void this.metadata.setFormat("bitrate",t)}this.tokenizer.ignore(Number(t.size)-m.len),e-=t.size}}}export{DsdContentParseError,DsfParser};
